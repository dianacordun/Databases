/* CERINȚA 4 */
CREATE TABLE CLIENT
(
id_client number(5) constraint pkey_c primary key,
nume_client varchar(25) constraint nume_c not null,
prenume_client varchar(25) constraint prenume_c not null,
telefon_client number(15) constraint telefon_c unique,
email_client varchar(50) constraint email_c unique
);

CREATE TABLE ISTORIC
(
id_client number(5), constraint fkey_istoric foreign key(id_client) references CLIENT(id_client) on delete cascade,
constraint c1 check (id_client is not null), 
nr_comenzi number(3) constraint plasate not null
);

CREATE TABLE COMANDA
(
id_comanda number(5) constraint pkey_com primary key,
id_client number(5), constraint fkey_comanda foreign key(id_client) references CLIENT(id_client) on delete cascade,
constraint c2 check (id_client is not null), 
data_comanda date constraint data_com not null,
pret_total number(9,2)
);

CREATE TABLE ANGAJATI
(
id_angajat number(5) constraint pkey_a primary key,
nume_ang varchar(25) constraint nume_a not null,
prenume_ang varchar(25) constraint prenume_a not null,
varsta number(2) constraint varsta_a not null,
telefon_ang varchar(20) constraint telefon_a not null,
unique(telefon_ang),
email_ang varchar(50) constraint email_a unique,
salariu number(4) constraint salariu_a not null
);

CREATE TABLE DEPOZIT
(
locatie varchar(30) constraint pkey_l primary key,
nr_angajati number(2) 
);

CREATE TABLE FACTURA
(
id_factura number(5) constraint pkey_f primary key,
id_comanda number(5),constraint fkey_f foreign key(id_comanda) references COMANDA(id_comanda) on delete cascade,
constraint c3 check(id_comanda is not null),
suma_de_plata number(9,2) 
);

CREATE TABLE TRANSPORT
(
nr_tracking number(8) constraint pkey_t primary key,
id_comanda number(5),constraint fkey_t foreign key(id_comanda) references COMANDA(id_comanda) on delete cascade,
constraint c4 check(id_comanda is not null),
data_expediere date, 
nume_companie varchar(30) constraint companie not null,
pret_transport number(4,2)
);

CREATE TABLE PRODUS
(
id_produs number(5) constraint pkey_p primary key,
nume_brand varchar(30) constraint brand not null,
nume_categorie varchar(30) constraint categorie not null,
nume_produs varchar(30) constraint numele not null,
pret_produs number(6,2), 
nuanta varchar(10)
);

CREATE TABLE CATEGORIE
(
nume_categorie varchar(30) constraint pkey_cat primary key,
nr_produse number(4),
descriere_categorie varchar(200) constraint descriere unique
);

CREATE TABLE BRAND
(
nume_brand varchar(30) constraint pkey_b primary key,
email_contact varchar(30) constraint email_c_b not null,
unique(email_contact)
);

CREATE TABLE FACE_PARTE
(
id_produs number(5) constraint fkey1 references PRODUS(id_produs) on delete set null,
id_comanda number(5) constraint fkey2 references COMANDA(id_comanda) on delete cascade,
constraint pk_compusa primary key(id_produs,id_comanda),
constraint c5 check(id_produs is not null),
constraint c6 check(id_comanda is not null),
cantitate number(2) constraint cant not null
);

CREATE TABLE DEPOZITEAZA
(
id_depozitare number(5) constraint pkey_dep primary key,
locatie varchar(30) constraint fkey_1 references DEPOZIT(locatie) on delete cascade,
id_angajat number(5) constraint fkey_2 references ANGAJATI(id_angajat) on delete cascade,
id_comanda number(5) constraint fkey_3 references COMANDA(id_comanda) on delete cascade,
constraint c7 check(locatie is not null),
constraint c8 check(id_angajat is not null),
constraint c9 check(id_comanda is not null)
);

--crearea secventelor utilizate pentru inserarea in tabele
CREATE SEQUENCE S_COMANDA
INCREMENT BY 1
START WITH 1000
MAXVALUE 10000
NOCYCLE;


CREATE SEQUENCE S_PRODUS
INCREMENT BY 5
START WITH 45
MAXVALUE 10000
NOCYCLE;


CREATE SEQUENCE S_ANGAJATI
INCREMENT BY 100
START WITH 2000
MAXVALUE 10000
NOCYCLE;

/* CERINȚA 5 */
--15 de clienti,dintre care 2 nu au nr de tel si 2 nu au email, 1 nu are niciuna
INSERT INTO CLIENT(id_client,nume_client, prenume_client, telefon_client, email_client)
VALUES(2,'Narayan','Manca',7695369616,'narayan_manca@gmail.com');
INSERT INTO CLIENT(id_client,nume_client, prenume_client, telefon_client, email_client)
VALUES(1,'Arline','Carl',6689649881,'arline_carl@gmail.com');
INSERT INTO CLIENT(id_client,nume_client, prenume_client, telefon_client, email_client)
VALUES(3,'Trevor','Christina',6609240311,'trevor_christina@yahoo.com');
INSERT INTO CLIENT(id_client,nume_client, prenume_client, telefon_client, email_client)
VALUES(4,'Beso','Angelika',8896572892,'beso_angelika@outlook.com');
INSERT INTO CLIENT(id_client,nume_client, prenume_client, telefon_client, email_client)
VALUES(5,'Jocelin','Floriana',4696417035,'jocelin_floriana@yahoo.com');
INSERT INTO CLIENT(id_client,nume_client, prenume_client, telefon_client, email_client)
VALUES(6,'Beso','Petra',5053637758,'petra_beso@yahoo.com');
INSERT INTO CLIENT(id_client,nume_client, prenume_client, telefon_client, email_client)
VALUES(7,'Griet','Kenny',2497711488,'griet_kenny@gmail.com');
INSERT INTO CLIENT(id_client,nume_client, prenume_client, telefon_client, email_client)
VALUES(8,'Else','Shaina',3428110027,'else_shaina@gmail.com');
INSERT INTO CLIENT(id_client,nume_client, prenume_client, telefon_client, email_client)
VALUES(9,'Lungile','Markus',2528694430,'lungile_markus@yahoo.com');
INSERT INTO CLIENT(id_client,nume_client, prenume_client, telefon_client, email_client)
VALUES(10,'Andrej','Nikola',9136339170,'andrej_nicola@gmail.com');
INSERT INTO CLIENT(id_client,nume_client, prenume_client, telefon_client)
VALUES(11,'Mahmood','Mirinda',9225547198);
INSERT INTO CLIENT(id_client,nume_client, prenume_client, telefon_client)
VALUES(12,'Quintilius','Helena',2257570674);
INSERT INTO CLIENT(id_client,nume_client, prenume_client, email_client)
VALUES(13,'Hurik','Lorcan','hurik_lorcan@gmail.com');
INSERT INTO CLIENT(id_client,nume_client, prenume_client, email_client)
VALUES(14,'Appius','Jessica','appius_jessica@gmail.com');
INSERT INTO CLIENT(id_client,nume_client, prenume_client)
VALUES(15,'Eumelia','Daphne');

--15 inserari
INSERT INTO ISTORIC(id_client,nr_comenzi)
VALUES(1,2);
INSERT INTO ISTORIC(id_client,nr_comenzi)
VALUES(2,1);
INSERT INTO ISTORIC(id_client,nr_comenzi)
VALUES(3,1);
INSERT INTO ISTORIC(id_client,nr_comenzi)
VALUES(4,5);
INSERT INTO ISTORIC(id_client,nr_comenzi)
VALUES(5,6);
INSERT INTO ISTORIC(id_client,nr_comenzi)
VALUES(6,2);
INSERT INTO ISTORIC(id_client,nr_comenzi)
VALUES(7,2);
INSERT INTO ISTORIC(id_client,nr_comenzi)
VALUES(8,1);
INSERT INTO ISTORIC(id_client,nr_comenzi)
VALUES(9,4);
INSERT INTO ISTORIC(id_client,nr_comenzi)
VALUES(10,3);
INSERT INTO ISTORIC(id_client,nr_comenzi)
VALUES(11,3);
INSERT INTO ISTORIC(id_client,nr_comenzi)
VALUES(12,7);
INSERT INTO ISTORIC(id_client,nr_comenzi)
VALUES(13,2);
INSERT INTO ISTORIC(id_client,nr_comenzi)
VALUES(14,1);
INSERT INTO ISTORIC(id_client,nr_comenzi)
VALUES(15,1);

--41 de comenzi,4 vor fi fara pret
INSERT INTO COMANDA(id_comanda,id_client,data_comanda,pret_total)
VALUES(S_COMANDA.nextval,1,to_date('12-01-2019','dd-mm-yyyy'),120.39);
INSERT INTO COMANDA(id_comanda,id_client,data_comanda,pret_total)
VALUES(S_COMANDA.nextval,1,to_date('03-04-2021','dd-mm-yyyy'),193.99);
INSERT INTO COMANDA(id_comanda,id_client,data_comanda)
VALUES(S_COMANDA.nextval,2,to_date('22-06-2019','dd-mm-yyyy'));
INSERT INTO COMANDA(id_comanda,id_client,data_comanda,pret_total)
VALUES(S_COMANDA.nextval,3,to_date('19-02-2020','dd-mm-yyyy'),271.40);
INSERT INTO COMANDA(id_comanda,id_client,data_comanda,pret_total)
VALUES(S_COMANDA.nextval,4,to_date('19-02-2020','dd-mm-yyyy'),563.0);
INSERT INTO COMANDA(id_comanda,id_client,data_comanda,pret_total)
VALUES(S_COMANDA.nextval,4,to_date('29-08-2019','dd-mm-yyyy'),616.2);
INSERT INTO COMANDA(id_comanda,id_client,data_comanda)
VALUES(S_COMANDA.nextval,4,to_date('15-02-2020','dd-mm-yyyy'));
INSERT INTO COMANDA(id_comanda,id_client,data_comanda,pret_total)
VALUES(S_COMANDA.nextval,4,to_date('01-10-2019','dd-mm-yyyy'),696.59);
INSERT INTO COMANDA(id_comanda,id_client,data_comanda,pret_total)
VALUES(S_COMANDA.nextval,4,to_date('19-02-2020','dd-mm-yyyy'),214.59);
INSERT INTO COMANDA(id_comanda,id_client,data_comanda,pret_total)
VALUES(S_COMANDA.nextval,5,to_date('19-12-2020','dd-mm-yyyy'),1211.0);
INSERT INTO COMANDA(id_comanda,id_client,data_comanda,pret_total)
VALUES(S_COMANDA.nextval,5,to_date('19-02-2020','dd-mm-yyyy'),776.3);
INSERT INTO COMANDA(id_comanda,id_client,data_comanda,pret_total)
VALUES(S_COMANDA.nextval,5,to_date('03-04-2021','dd-mm-yyyy'),53.0);
INSERT INTO COMANDA(id_comanda,id_client,data_comanda,pret_total)
VALUES(S_COMANDA.nextval,5,to_date('31-03-2019','dd-mm-yyyy'),993.0);
INSERT INTO COMANDA(id_comanda,id_client,data_comanda,pret_total)
VALUES(S_COMANDA.nextval,5,to_date('09-03-2019','dd-mm-yyyy'),1743.0);
INSERT INTO COMANDA(id_comanda,id_client,data_comanda,pret_total)
VALUES(S_COMANDA.nextval,5,to_date('01-10-2019','dd-mm-yyyy'),220.0);
INSERT INTO COMANDA(id_comanda,id_client,data_comanda,pret_total)
VALUES(S_COMANDA.nextval,6,to_date('22-06-2019','dd-mm-yyyy'),214.59);
INSERT INTO COMANDA(id_comanda,id_client,data_comanda,pret_total)
VALUES(S_COMANDA.nextval,6,to_date('09-09-2019','dd-mm-yyyy'),1211.0);
INSERT INTO COMANDA(id_comanda,id_client,data_comanda,pret_total)
VALUES(S_COMANDA.nextval,7,to_date('19-02-2020','dd-mm-yyyy'),120.39);
INSERT INTO COMANDA(id_comanda,id_client,data_comanda,pret_total)
VALUES(S_COMANDA.nextval,7,to_date('15-02-2020','dd-mm-yyyy'),1211.0);
INSERT INTO COMANDA(id_comanda,id_client,data_comanda,pret_total)
VALUES(S_COMANDA.nextval,8,to_date('11-12-2020','dd-mm-yyyy'),214.59);
INSERT INTO COMANDA(id_comanda,id_client,data_comanda,pret_total)
VALUES(S_COMANDA.nextval,9,to_date('19-02-2020','dd-mm-yyyy'),120.39);
INSERT INTO COMANDA(id_comanda,id_client,data_comanda,pret_total)
VALUES(S_COMANDA.nextval,9,to_date('29-07-2019','dd-mm-yyyy'),220.0);
INSERT INTO COMANDA(id_comanda,id_client,data_comanda,pret_total)
VALUES(S_COMANDA.nextval,9,to_date('15-02-2020','dd-mm-yyyy'),53.0);
INSERT INTO COMANDA(id_comanda,id_client,data_comanda,pret_total)
VALUES(S_COMANDA.nextval,9,to_date('26-07-2020','dd-mm-yyyy'),505.99);
INSERT INTO COMANDA(id_comanda,id_client,data_comanda,pret_total)
VALUES(S_COMANDA.nextval,10,to_date('19-02-2020','dd-mm-yyyy'),505.99);
INSERT INTO COMANDA(id_comanda,id_client,data_comanda,pret_total)
VALUES(S_COMANDA.nextval,10,to_date('22-06-2019','dd-mm-yyyy'),220.0);
INSERT INTO COMANDA(id_comanda,id_client,data_comanda,pret_total)
VALUES(S_COMANDA.nextval,10,to_date('17-02-2019','dd-mm-yyyy'),53.0);
INSERT INTO COMANDA(id_comanda,id_client,data_comanda,pret_total)
VALUES(S_COMANDA.nextval,11,to_date('19-02-2020','dd-mm-yyyy'),113.99);
INSERT INTO COMANDA(id_comanda,id_client,data_comanda,pret_total)
VALUES(S_COMANDA.nextval,11,to_date('06-03-2020','dd-mm-yyyy'),22.30);
INSERT INTO COMANDA(id_comanda,id_client,data_comanda,pret_total)
VALUES(S_COMANDA.nextval,11,to_date('25-03-2020','dd-mm-yyyy'),505.99);
INSERT INTO COMANDA(id_comanda,id_client,data_comanda)
VALUES(S_COMANDA.nextval,12,to_date('25-03-2020','dd-mm-yyyy'));
INSERT INTO COMANDA(id_comanda,id_client,data_comanda,pret_total)
VALUES(S_COMANDA.nextval,12,to_date('19-02-2020','dd-mm-yyyy'),120.39);
INSERT INTO COMANDA(id_comanda,id_client,data_comanda,pret_total)
VALUES(S_COMANDA.nextval,12,to_date('31-03-2019','dd-mm-yyyy'),22.30);
INSERT INTO COMANDA(id_comanda,id_client,data_comanda,pret_total)
VALUES(S_COMANDA.nextval,12,to_date('12-01-2019','dd-mm-yyyy'),505.99);
INSERT INTO COMANDA(id_comanda,id_client,data_comanda,pret_total)
VALUES(S_COMANDA.nextval,12,to_date('17-01-2019','dd-mm-yyyy'),220.0);
INSERT INTO COMANDA(id_comanda,id_client,data_comanda)
VALUES(S_COMANDA.nextval,12,to_date('10-03-2019','dd-mm-yyyy'));
INSERT INTO COMANDA(id_comanda,id_client,data_comanda,pret_total)
VALUES(S_COMANDA.nextval,12,to_date('01-10-2019','dd-mm-yyyy'),214.59);
INSERT INTO COMANDA(id_comanda,id_client,data_comanda,pret_total)
VALUES(S_COMANDA.nextval,13,to_date('30-08-2019','dd-mm-yyyy'),22.30);
INSERT INTO COMANDA(id_comanda,id_client,data_comanda,pret_total)
VALUES(S_COMANDA.nextval,13,to_date('01-10-2019','dd-mm-yyyy'),120.39);
INSERT INTO COMANDA(id_comanda,id_client,data_comanda,pret_total)
VALUES(S_COMANDA.nextval,14,to_date('06-03-2020','dd-mm-yyyy'),53.0);
INSERT INTO COMANDA(id_comanda,id_client,data_comanda,pret_total)
VALUES(S_COMANDA.nextval,15,to_date('17-01-2019','dd-mm-yyyy'),113.99);

--41 de facturi, 4 facturi nu vor avea sumă de plată, pentru 7 comenzi se adaugă 15 lei, prețul transportului
INSERT INTO FACTURA(id_factura,id_comanda,suma_de_plata)
VALUES(201,1001,120.39);
INSERT INTO FACTURA(id_factura,id_comanda,suma_de_plata)
VALUES(202,1002,193.99);
INSERT INTO FACTURA(id_factura,id_comanda)
VALUES(203,1003);
INSERT INTO FACTURA(id_factura,id_comanda,suma_de_plata)
VALUES(204,1004,214.59);
INSERT INTO FACTURA(id_factura,id_comanda,suma_de_plata)
VALUES(205,1005,563);
INSERT INTO FACTURA(id_factura,id_comanda,suma_de_plata)
VALUES(206,1006,616.2);
INSERT INTO FACTURA(id_factura,id_comanda)
VALUES(207,1007);
INSERT INTO FACTURA(id_factura,id_comanda,suma_de_plata)
VALUES(208,1008,696.59);
INSERT INTO FACTURA(id_factura,id_comanda,suma_de_plata)
VALUES(209,1009,214.59);
INSERT INTO FACTURA(id_factura,id_comanda,suma_de_plata)
VALUES(210,1010,1211);
INSERT INTO FACTURA(id_factura,id_comanda,suma_de_plata)
VALUES(211,1011,776.3);
INSERT INTO FACTURA(id_factura,id_comanda,suma_de_plata)
VALUES(212,1012,68);
INSERT INTO FACTURA(id_factura,id_comanda,suma_de_plata)
VALUES(213,1013,993);
INSERT INTO FACTURA(id_factura,id_comanda,suma_de_plata)
VALUES(214,1014,1743);
INSERT INTO FACTURA(id_factura,id_comanda,suma_de_plata)
VALUES(215,1015,220);
INSERT INTO FACTURA(id_factura,id_comanda,suma_de_plata)
VALUES(216,1016,214.59);
INSERT INTO FACTURA(id_factura,id_comanda,suma_de_plata)
VALUES(217,1017,1211);
INSERT INTO FACTURA(id_factura,id_comanda,suma_de_plata)
VALUES(218,1018,120.39);
INSERT INTO FACTURA(id_factura,id_comanda,suma_de_plata)
VALUES(219,1019,1211);
INSERT INTO FACTURA(id_factura,id_comanda,suma_de_plata)
VALUES(220,1020,214.59);
INSERT INTO FACTURA(id_factura,id_comanda,suma_de_plata)
VALUES(221,1021,120.39);
INSERT INTO FACTURA(id_factura,id_comanda,suma_de_plata)
VALUES(222,1022,220);
INSERT INTO FACTURA(id_factura,id_comanda,suma_de_plata)
VALUES(223,1023,68);
INSERT INTO FACTURA(id_factura,id_comanda,suma_de_plata)
VALUES(224,1024,505.99);
INSERT INTO FACTURA(id_factura,id_comanda,suma_de_plata)
VALUES(225,1025,220);
INSERT INTO FACTURA(id_factura,id_comanda,suma_de_plata)
VALUES(226,1026,68);
INSERT INTO FACTURA(id_factura,id_comanda,suma_de_plata)
VALUES(227,1027,37.3);
INSERT INTO FACTURA(id_factura,id_comanda)
VALUES(228,1028);
INSERT INTO FACTURA(id_factura,id_comanda,suma_de_plata)
VALUES(229,1029,120.39);
INSERT INTO FACTURA(id_factura,id_comanda,suma_de_plata)
VALUES(230,1030,37.3);
INSERT INTO FACTURA(id_factura,id_comanda,suma_de_plata)
VALUES(231,1031,220);
INSERT INTO FACTURA(id_factura,id_comanda)
VALUES(232,1032);
INSERT INTO FACTURA(id_factura,id_comanda,suma_de_plata)
VALUES(233,1033,214.59);
INSERT INTO FACTURA(id_factura,id_comanda,suma_de_plata)
VALUES(234,1034,37.3);
INSERT INTO FACTURA(id_factura,id_comanda,suma_de_plata)
VALUES(235,1035,120.39);
INSERT INTO FACTURA(id_factura,id_comanda,suma_de_plata)
VALUES(236,1036,68);
INSERT INTO FACTURA(id_factura,id_comanda,suma_de_plata)
VALUES(237,1037,113.99);
INSERT INTO FACTURA(id_factura,id_comanda,suma_de_plata)
VALUES(238,1038,505.99);
INSERT INTO FACTURA(id_factura,id_comanda,suma_de_plata)
VALUES(239,1039,505.99);
INSERT INTO FACTURA(id_factura,id_comanda,suma_de_plata)
VALUES(240,1040,505.99);
INSERT INTO FACTURA(id_factura,id_comanda,suma_de_plata)
VALUES(241,1041,505.99);

--41 de inserări, 34 de comenzi vor avea transport gratuit
INSERT INTO TRANSPORT(nr_tracking,id_comanda,data_expediere,nume_companie,pret_transport)
VALUES(301,1012,to_date('07-04-2021','dd-mm-yyyy'),'Cargus',15);
INSERT INTO TRANSPORT(nr_tracking,id_comanda,data_expediere,nume_companie,pret_transport)
VALUES(302,1023,to_date('18-02-2020','dd-mm-yyyy'),'Fan Courier',15);
INSERT INTO TRANSPORT(nr_tracking,id_comanda,data_expediere,nume_companie,pret_transport)
VALUES(303,1026,to_date('19-02-2019','dd-mm-yyyy'),'Sameday',15);
INSERT INTO TRANSPORT(nr_tracking,id_comanda,data_expediere,nume_companie,pret_transport)
VALUES(304,1027,to_date('08-03-2020','dd-mm-yyyy'),'Fan Courier',15);
INSERT INTO TRANSPORT(nr_tracking,id_comanda,data_expediere,nume_companie,pret_transport)
VALUES(305,1030,to_date('3-04-2019','dd-mm-yyyy'),'Fan Courier',15);
INSERT INTO TRANSPORT(nr_tracking,id_comanda,data_expediere,nume_companie,pret_transport)
VALUES(306,1034,to_date('3-09-2019','dd-mm-yyyy'),'Cargus',15);
INSERT INTO TRANSPORT(nr_tracking,id_comanda,data_expediere,nume_companie,pret_transport)
VALUES(307,1036,to_date('07-03-2020','dd-mm-yyyy'),'Cargus',15);
INSERT INTO TRANSPORT(nr_tracking,id_comanda,data_expediere,nume_companie)
VALUES(308,1001,to_date('15-01-2019','dd-mm-yyyy'),'Cargus');
INSERT INTO TRANSPORT(nr_tracking,id_comanda,data_expediere,nume_companie)
VALUES(309,1002,to_date('06-04-2021','dd-mm-yyyy'),'Fan Courier');
INSERT INTO TRANSPORT(nr_tracking,id_comanda,data_expediere,nume_companie)
VALUES(310,1003,to_date('23-06-2019','dd-mm-yyyy'),'Cargus');
INSERT INTO TRANSPORT(nr_tracking,id_comanda,data_expediere,nume_companie)
VALUES(311,1004,to_date('21-02-2020','dd-mm-yyyy'),'Cargus');
INSERT INTO TRANSPORT(nr_tracking,id_comanda,data_expediere,nume_companie)
VALUES(312,1005,to_date('21-02-2020','dd-mm-yyyy'),'Fan Courier');
INSERT INTO TRANSPORT(nr_tracking,id_comanda,data_expediere,nume_companie)
VALUES(313,1006,to_date('30-08-2019','dd-mm-yyyy'),'Fan Courier');
INSERT INTO TRANSPORT(nr_tracking,id_comanda,data_expediere,nume_companie)
VALUES(314,1007,to_date('17-02-2020','dd-mm-yyyy'),'Sameday');
INSERT INTO TRANSPORT(nr_tracking,id_comanda,data_expediere,nume_companie)
VALUES(315,1008,to_date('04-10-2019','dd-mm-yyyy'),'Fan Courier');
INSERT INTO TRANSPORT(nr_tracking,id_comanda,data_expediere,nume_companie)
VALUES(316,1009,to_date('21-02-2020','dd-mm-yyyy'),'Cargus');
INSERT INTO TRANSPORT(nr_tracking,id_comanda,data_expediere,nume_companie)
VALUES(317,1010,to_date('21-02-2020','dd-mm-yyyy'),'Cargus');
INSERT INTO TRANSPORT(nr_tracking,id_comanda,data_expediere,nume_companie)
VALUES(318,1011,to_date('21-02-2020','dd-mm-yyyy'),'Cargus');
INSERT INTO TRANSPORT(nr_tracking,id_comanda,data_expediere,nume_companie)
VALUES(319,1013,to_date('02-04-2019','dd-mm-yyyy'),'Fan Courier');
INSERT INTO TRANSPORT(nr_tracking,id_comanda,data_expediere,nume_companie)
VALUES(320,1014,to_date('11-03-2019','dd-mm-yyyy'),'Cargus');
INSERT INTO TRANSPORT(nr_tracking,id_comanda,data_expediere,nume_companie)
VALUES(321,1015,to_date('03-10-2019','dd-mm-yyyy'),'Cargus');
INSERT INTO TRANSPORT(nr_tracking,id_comanda,data_expediere,nume_companie)
VALUES(322,1016,to_date('25-06-2019','dd-mm-yyyy'),'Fan Courier');
INSERT INTO TRANSPORT(nr_tracking,id_comanda,data_expediere,nume_companie)
VALUES(323,1017,to_date('11-09-2019','dd-mm-yyyy'),'Fan Courier');
INSERT INTO TRANSPORT(nr_tracking,id_comanda,data_expediere,nume_companie)
VALUES(324,1018,to_date('21-02-2020','dd-mm-yyyy'),'Sameday');
INSERT INTO TRANSPORT(nr_tracking,id_comanda,data_expediere,nume_companie)
VALUES(325,1019,to_date('17-02-2020','dd-mm-yyyy'),'Fan Courier');
INSERT INTO TRANSPORT(nr_tracking,id_comanda,data_expediere,nume_companie)
VALUES(326,1020,to_date('19-12-2020','dd-mm-yyyy'),'Cargus');
INSERT INTO TRANSPORT(nr_tracking,id_comanda,data_expediere,nume_companie)
VALUES(327,1021,to_date('22-02-2020','dd-mm-yyyy'),'Cargus');
INSERT INTO TRANSPORT(nr_tracking,id_comanda,data_expediere,nume_companie)
VALUES(328,1022,to_date('30-07-2019','dd-mm-yyyy'),'Cargus');
INSERT INTO TRANSPORT(nr_tracking,id_comanda,data_expediere,nume_companie)
VALUES(329,1024,to_date('29-07-2020','dd-mm-yyyy'),'Fan Courier');
INSERT INTO TRANSPORT(nr_tracking,id_comanda,data_expediere,nume_companie)
VALUES(330,1025,to_date('25-06-2019','dd-mm-yyyy'),'Cargus');
INSERT INTO TRANSPORT(nr_tracking,id_comanda,data_expediere,nume_companie)
VALUES(331,1028,to_date('28-03-2020','dd-mm-yyyy'),'Cargus');
INSERT INTO TRANSPORT(nr_tracking,id_comanda,data_expediere,nume_companie)
VALUES(332,1029,to_date('22-02-2020','dd-mm-yyyy'),'Fan Courier');
INSERT INTO TRANSPORT(nr_tracking,id_comanda,data_expediere,nume_companie)
VALUES(333,1031,to_date('20-01-2019','dd-mm-yyyy'),'Fan Courier');
INSERT INTO TRANSPORT(nr_tracking,id_comanda,data_expediere,nume_companie)
VALUES(334,1032,to_date('18-03-2019','dd-mm-yyyy'),'Sameday');
INSERT INTO TRANSPORT(nr_tracking,id_comanda,data_expediere,nume_companie)
VALUES(335,1033,to_date('06-10-2019','dd-mm-yyyy'),'Fan Courier');
INSERT INTO TRANSPORT(nr_tracking,id_comanda,data_expediere,nume_companie)
VALUES(336,1035,to_date('05-10-2019','dd-mm-yyyy'),'Cargus');
INSERT INTO TRANSPORT(nr_tracking,id_comanda,data_expediere,nume_companie)
VALUES(337,1037,to_date('19-01-2019','dd-mm-yyyy'),'Cargus');
INSERT INTO TRANSPORT(nr_tracking,id_comanda,data_expediere,nume_companie)
VALUES(338,1038,to_date('15-01-2019','dd-mm-yyyy'),'Sameday');
INSERT INTO TRANSPORT(nr_tracking,id_comanda,data_expediere,nume_companie)
VALUES(339,1039,to_date('27-03-2020','dd-mm-yyyy'),'Fan Courier');
INSERT INTO TRANSPORT(nr_tracking,id_comanda,data_expediere,nume_companie)
VALUES(340,1040,to_date('23-02-2020','dd-mm-yyyy'),'Cargus');
INSERT INTO TRANSPORT(nr_tracking,id_comanda,data_expediere,nume_companie)
VALUES(341,1041,to_date('27-03-2020','dd-mm-yyyy'),'Cargus');

--6 inserări, într-un depozit încă nu sunt angajați
INSERT INTO DEPOZIT(locatie)
VALUES('Magurele');
INSERT INTO DEPOZIT(locatie,nr_angajati)
VALUES('Chitila',5);
INSERT INTO DEPOZIT(locatie,nr_angajati)
VALUES('Dudesti',2);
INSERT INTO DEPOZIT(locatie,nr_angajati)
VALUES('Pantelimon',2);
INSERT INTO DEPOZIT(locatie,nr_angajati)
VALUES('Bragadiru',1);
INSERT INTO DEPOZIT(locatie,nr_angajati)
VALUES('Voluntari',3);


--10 angajați,dintre care unul nu are email
INSERT INTO ANGAJATI(id_angajat,nume_ang,prenume_ang,varsta,telefon_ang,email_ang,salariu)
VALUES(S_ANGAJATI.nextval,'Popescu','Maria',28,'0744104309','maria_popescu@yahoo.com',3500);
INSERT INTO ANGAJATI(id_angajat,nume_ang,prenume_ang,varsta,telefon_ang,email_ang,salariu)
VALUES(S_ANGAJATI.nextval,'Dolcu','Marian',31,'0794104309','dolcu_marian@yahoo.com',4800);
INSERT INTO ANGAJATI(id_angajat,nume_ang,prenume_ang,varsta,telefon_ang,salariu)
VALUES(S_ANGAJATI.nextval,'Constantinescu','Alexandra',29,'0746104309',3500);
INSERT INTO ANGAJATI(id_angajat,nume_ang,prenume_ang,varsta,telefon_ang,email_ang,salariu)
VALUES(S_ANGAJATI.nextval,'Nicolae','Miriam',21,'0744106309','nicolae_miriam@yahoo.com',3500);
INSERT INTO ANGAJATI(id_angajat,nume_ang,prenume_ang,varsta,telefon_ang,email_ang,salariu)
VALUES(S_ANGAJATI.nextval,'Silion','Ioana',22,'0744504309','silion_ioana@yahoo.com',2500);
INSERT INTO ANGAJATI(id_angajat,nume_ang,prenume_ang,varsta,telefon_ang,email_ang,salariu)
VALUES(S_ANGAJATI.nextval,'Gabora','Mihai',21,'0754104309','gabora_mihai@yahoo.com',2600);
INSERT INTO ANGAJATI(id_angajat,nume_ang,prenume_ang,varsta,telefon_ang,email_ang,salariu)
VALUES(S_ANGAJATI.nextval,'Petrescu','Radu',20,'0754204309','petrescu_radu@yahoo.com',2500);
INSERT INTO ANGAJATI(id_angajat,nume_ang,prenume_ang,varsta,telefon_ang,email_ang,salariu)
VALUES(S_ANGAJATI.nextval,'Silion','Tudor',25,'0745304309','tudor_silion@yahoo.com',2600);
INSERT INTO ANGAJATI(id_angajat,nume_ang,prenume_ang,varsta,telefon_ang,email_ang,salariu)
VALUES(S_ANGAJATI.nextval,'Saru','Adina',25,'07487604309','saru_adina@yahoo.com',3600);
INSERT INTO ANGAJATI(id_angajat,nume_ang,prenume_ang,varsta,telefon_ang,email_ang,salariu)
VALUES(S_ANGAJATI.nextval,'Savulescu','Daria',25,'07786104309','savulescu_d@yahoo.com',3700);

--45 de inserări
INSERT INTO DEPOZITEAZA(id_depozitare,locatie,id_angajat,id_comanda)
VALUES(5001,'Chitila',2500,1001);
INSERT INTO DEPOZITEAZA(id_depozitare,locatie,id_angajat,id_comanda)
VALUES(5002,'Bragadiru',3000,1002);
INSERT INTO DEPOZITEAZA(id_depozitare,locatie,id_angajat,id_comanda)
VALUES(5003,'Dudesti',2200,1003);
INSERT INTO DEPOZITEAZA(id_depozitare,locatie,id_angajat,id_comanda)
VALUES(5004,'Pantelimon',2600,1004);
INSERT INTO DEPOZITEAZA(id_depozitare,locatie,id_angajat,id_comanda)
VALUES(5005,'Chitila',2700,1005);
INSERT INTO DEPOZITEAZA(id_depozitare,locatie,id_angajat,id_comanda)
VALUES(5006,'Voluntari',2100,1006);
INSERT INTO DEPOZITEAZA(id_depozitare,locatie,id_angajat,id_comanda)
VALUES(5007,'Voluntari',2100,1007);
INSERT INTO DEPOZITEAZA(id_depozitare,locatie,id_angajat,id_comanda)
VALUES(5008,'Bragadiru',3000,1008);
INSERT INTO DEPOZITEAZA(id_depozitare,locatie,id_angajat,id_comanda)
VALUES(5009,'Dudesti',2200,1009);
INSERT INTO DEPOZITEAZA(id_depozitare,locatie,id_angajat,id_comanda)
VALUES(5010,'Voluntari',2500,1010);
INSERT INTO DEPOZITEAZA(id_depozitare,locatie,id_angajat,id_comanda)
VALUES(5011,'Chitila',2900,1011);
INSERT INTO DEPOZITEAZA(id_depozitare,locatie,id_angajat,id_comanda)
VALUES(5012,'Bragadiru',3000,1012);
INSERT INTO DEPOZITEAZA(id_depozitare,locatie,id_angajat,id_comanda)
VALUES(5013,'Bragadiru',3000,1013);
INSERT INTO DEPOZITEAZA(id_depozitare,locatie,id_angajat,id_comanda)
VALUES(5014,'Voluntari',2300,1014);
INSERT INTO DEPOZITEAZA(id_depozitare,locatie,id_angajat,id_comanda)
VALUES(5015,'Dudesti',2400,1015);
INSERT INTO DEPOZITEAZA(id_depozitare,locatie,id_angajat,id_comanda)
VALUES(5016,'Pantelimon',2600,1016);
INSERT INTO DEPOZITEAZA(id_depozitare,locatie,id_angajat,id_comanda)
VALUES(5017,'Dudesti',2200,1017);
INSERT INTO DEPOZITEAZA(id_depozitare,locatie,id_angajat,id_comanda)
VALUES(5018,'Chitila',2100,1018);
INSERT INTO DEPOZITEAZA(id_depozitare,locatie,id_angajat,id_comanda)
VALUES(5019,'Magurele',2200,1019);
INSERT INTO DEPOZITEAZA(id_depozitare,locatie,id_angajat,id_comanda)
VALUES(5020,'Bragadiru',3000,1020);
INSERT INTO DEPOZITEAZA(id_depozitare,locatie,id_angajat,id_comanda)
VALUES(5021,'Bragadiru',3000,1021);
INSERT INTO DEPOZITEAZA(id_depozitare,locatie,id_angajat,id_comanda)
VALUES(5022,'Pantelimon',2800,1022);
INSERT INTO DEPOZITEAZA(id_depozitare,locatie,id_angajat,id_comanda)
VALUES(5023,'Dudesti',2400,1023);
INSERT INTO DEPOZITEAZA(id_depozitare,locatie,id_angajat,id_comanda)
VALUES(5024,'Dudesti',2400,1024);
INSERT INTO DEPOZITEAZA(id_depozitare,locatie,id_angajat,id_comanda)
VALUES(5025,'Chitila',2300,1025);
INSERT INTO DEPOZITEAZA(id_depozitare,locatie,id_angajat,id_comanda)
VALUES(5026,'Pantelimon',2800,1026);
INSERT INTO DEPOZITEAZA(id_depozitare,locatie,id_angajat,id_comanda)
VALUES(5027,'Pantelimon',2800,1027);
INSERT INTO DEPOZITEAZA(id_depozitare,locatie,id_angajat,id_comanda)
VALUES(5028,'Bragadiru',3000,1028);
INSERT INTO DEPOZITEAZA(id_depozitare,locatie,id_angajat,id_comanda)
VALUES(5029,'Chitila',2700,1029);
INSERT INTO DEPOZITEAZA(id_depozitare,locatie,id_angajat,id_comanda)
VALUES(5030,'Chitila',2500,1030);
INSERT INTO DEPOZITEAZA(id_depozitare,locatie,id_angajat,id_comanda)
VALUES(5031,'Bragadiru',3000,1031);
INSERT INTO DEPOZITEAZA(id_depozitare,locatie,id_angajat,id_comanda)
VALUES(5032,'Pantelimon',2600,1032);
INSERT INTO DEPOZITEAZA(id_depozitare,locatie,id_angajat,id_comanda)
VALUES(5033,'Pantelimon',2600,1033);
INSERT INTO DEPOZITEAZA(id_depozitare,locatie,id_angajat,id_comanda)
VALUES(5034,'Pantelimon',2800,1034);
INSERT INTO DEPOZITEAZA(id_depozitare,locatie,id_angajat,id_comanda)
VALUES(5035,'Chitila',2500,1035);
INSERT INTO DEPOZITEAZA(id_depozitare,locatie,id_angajat,id_comanda)
VALUES(5036,'Bragadiru',3000,1036);
INSERT INTO DEPOZITEAZA(id_depozitare,locatie,id_angajat,id_comanda)
VALUES(5037,'Dudesti',2200,1037);
INSERT INTO DEPOZITEAZA(id_depozitare,locatie,id_angajat,id_comanda)
VALUES(5038,'Pantelimon',2800,1038);
INSERT INTO DEPOZITEAZA(id_depozitare,locatie,id_angajat,id_comanda)
VALUES(5039,'Bragadiru',3000,1039);
INSERT INTO DEPOZITEAZA(id_depozitare,locatie,id_angajat,id_comanda)
VALUES(5040,'Bragadiru',3000,1040);
INSERT INTO DEPOZITEAZA(id_depozitare,locatie,id_angajat,id_comanda)
VALUES(5041,'Bragadiru',3000,1041);
INSERT INTO DEPOZITEAZA(id_depozitare,locatie,id_angajat,id_comanda)
VALUES(5042,'Pantelimon',2800,1011);
INSERT INTO DEPOZITEAZA(id_depozitare,locatie,id_angajat,id_comanda)
VALUES(5043,'Chitila',2300,1012);
INSERT INTO DEPOZITEAZA(id_depozitare,locatie,id_angajat,id_comanda)
VALUES(5044,'Chitila',2500,1026);
INSERT INTO DEPOZITEAZA(id_depozitare,locatie,id_angajat,id_comanda)
VALUES(5050,'Bragadiru',3000,1030);


--5 categorii,una fiind fără produse
INSERT INTO CATEGORIE(nume_categorie,nr_produse,descriere_categorie)
VALUES('Ten',5,'Produse destinate machiajului fetei si ingrijirii pielii');
INSERT INTO CATEGORIE(nume_categorie,nr_produse)
VALUES('Parfum',6);
INSERT INTO CATEGORIE(nume_categorie,nr_produse,descriere_categorie)
VALUES('Ochi',6,'Produse destinate machiajului ochilor si al sprancenelor');
INSERT INTO CATEGORIE(nume_categorie,nr_produse)
VALUES('Buze',4);
INSERT INTO CATEGORIE(nume_categorie,descriere_categorie)
VALUES('Corp','Seturi de tratamente si accesorii pentru ingrijirea pielii tenului');

--6 brand-uri
INSERT INTO BRAND(nume_brand,email_contact)
VALUES('Hugo Boss','contact@hugoboss.com');
INSERT INTO BRAND(nume_brand,email_contact)
VALUES('Fenty Beauty','contact@fenty.com');
INSERT INTO BRAND(nume_brand,email_contact)
VALUES('Too Faced','contact@toofaced.com');
INSERT INTO BRAND(nume_brand,email_contact)
VALUES('Huda Beauty','contact@hudabeauty.com');
INSERT INTO BRAND(nume_brand,email_contact)
VALUES('Maybelline','contact@maybelline.com');
INSERT INTO BRAND(nume_brand,email_contact)
VALUES('Anastasia Beverly Hills','contact@abh.com');
INSERT INTO BRAND(nume_brand,email_contact)
VALUES('NYX Professional Makeup','contact@nyx.com');

--21 de produse
INSERT INTO PRODUS(id_produs,nume_brand,nume_categorie,nume_produs,pret_produs,nuanta)
VALUES(S_PRODUS.nextval,'Fenty Beauty','Buze','Gloss Bomb',90,'Mauve');
INSERT INTO PRODUS(id_produs,nume_brand,nume_categorie,nume_produs,pret_produs,nuanta)
VALUES(S_PRODUS.nextval,'Fenty Beauty','Buze','Gloss Bomb',90,'Cookie Jar');
INSERT INTO PRODUS(id_produs,nume_brand,nume_categorie,nume_produs,pret_produs,nuanta)
VALUES(S_PRODUS.nextval,'Fenty Beauty','Buze','Gloss Bomb',90,'Waffles');
INSERT INTO PRODUS(id_produs,nume_brand,nume_categorie,nume_produs,pret_produs,nuanta)
VALUES(S_PRODUS.nextval,'NYX Professional Makeup','Buze','Lingerie Liquid Lipstick',39.99,'Corset');
INSERT INTO PRODUS(id_produs,nume_brand,nume_categorie,nume_produs,pret_produs,nuanta)
VALUES(S_PRODUS.nextval,'Fenty Beauty','Ten','Diamond Bomb Diamond Veil',190,'Cognac');
INSERT INTO PRODUS(id_produs,nume_brand,nume_categorie,nume_produs,pret_produs,nuanta)
VALUES(S_PRODUS.nextval,'Fenty Beauty','Ten','Match Stix Matte Skinstick',120,'Vanilla');
INSERT INTO PRODUS(id_produs,nume_brand,nume_categorie,nume_produs,pret_produs,nuanta)
VALUES(S_PRODUS.nextval,'Too Faced','Ten','Peach Perfect Loose Powder ',159,'Light');
INSERT INTO PRODUS(id_produs,nume_brand,nume_categorie,nume_produs,pret_produs,nuanta)
VALUES(S_PRODUS.nextval,'Too Faced','Ten','Peach Perfect Foundation',185,'Snow');
INSERT INTO PRODUS(id_produs,nume_brand,nume_categorie,nume_produs,pret_produs,nuanta)
VALUES(S_PRODUS.nextval,'Too Faced','Ten','Fruit Cocktail Duo De Blush',150,'Cherry');
INSERT INTO PRODUS(id_produs,nume_brand,nume_categorie,nume_produs,pret_produs)
VALUES(S_PRODUS.nextval,'Anastasia Beverly Hills','Ochi','Modern Renaissance Palette',245);
INSERT INTO PRODUS(id_produs,nume_brand,nume_categorie,nume_produs,pret_produs)
VALUES(S_PRODUS.nextval,'Anastasia Beverly Hills','Ochi','Liquid Liner',106);
INSERT INTO PRODUS(id_produs,nume_brand,nume_categorie,nume_produs,pret_produs,nuanta)
VALUES(S_PRODUS.nextval,'Anastasia Beverly Hills','Ochi','Mini Dipbrow Gel',53,'Medium');
INSERT INTO PRODUS(id_produs,nume_brand,nume_categorie,nume_produs,pret_produs,nuanta)
VALUES(S_PRODUS.nextval,'Huda Beauty','Ochi','Mini Brown Obsessions',152,'Chocolate');
INSERT INTO PRODUS(id_produs,nume_brand,nume_categorie,nume_produs,pret_produs,nuanta)
VALUES(S_PRODUS.nextval,'Huda Beauty','Ochi','Mini Brown Obsessions',152,'Caramel');
INSERT INTO PRODUS(id_produs,nume_brand,nume_categorie,nume_produs,pret_produs)
VALUES(S_PRODUS.nextval,'Huda Beauty','Ochi','Mercury Retrograde',330);
INSERT INTO PRODUS(id_produs,nume_brand,nume_categorie,nume_produs,pret_produs)
VALUES(S_PRODUS.nextval,'Hugo Boss','Parfum','BOSS BOTTLED Infinite 50ml',401);
INSERT INTO PRODUS(id_produs,nume_brand,nume_categorie,nume_produs,pret_produs)
VALUES(S_PRODUS.nextval,'Hugo Boss','Parfum','BOSS BOTTLED 100ml',500);
INSERT INTO PRODUS(id_produs,nume_brand,nume_categorie,nume_produs,pret_produs)
VALUES(S_PRODUS.nextval,'Hugo Boss','Parfum','Boss Femme 50ml',375);
INSERT INTO PRODUS(id_produs,nume_brand,nume_categorie,nume_produs,pret_produs)
VALUES(S_PRODUS.nextval,'Hugo Boss','Parfum','Boss The Scent 200ml',729);
INSERT INTO PRODUS(id_produs,nume_brand,nume_categorie,nume_produs,pret_produs)
VALUES(S_PRODUS.nextval,'Hugo Boss','Parfum','BOSS BOTTLED TONIC 50ml',383);
INSERT INTO PRODUS(id_produs,nume_brand,nume_categorie,nume_produs,pret_produs)
VALUES(S_PRODUS.nextval,'Hugo Boss','Parfum','Hugo Man 125ml',436);

--50 de inserări
INSERT INTO FACE_PARTE(id_produs,id_comanda,cantitate)
VALUES(55,1001,1);
INSERT INTO FACE_PARTE(id_produs,id_comanda,cantitate)
VALUES(75,1002,1);
INSERT INTO FACE_PARTE(id_produs,id_comanda,cantitate)
VALUES(115,1003,1);
INSERT INTO FACE_PARTE(id_produs,id_comanda,cantitate)
VALUES(105,1004,3);
INSERT INTO FACE_PARTE(id_produs,id_comanda,cantitate)
VALUES(85,1005,2);
INSERT INTO FACE_PARTE(id_produs,id_comanda,cantitate)
VALUES(70,1006,1);
INSERT INTO FACE_PARTE(id_produs,id_comanda,cantitate)
VALUES(60,1007,1);
INSERT INTO FACE_PARTE(id_produs,id_comanda,cantitate)
VALUES(55,1008,1);
INSERT INTO FACE_PARTE(id_produs,id_comanda,cantitate)
VALUES(85,1009,3);
INSERT INTO FACE_PARTE(id_produs,id_comanda,cantitate)
VALUES(50,1010,2);
INSERT INTO FACE_PARTE(id_produs,id_comanda,cantitate)
VALUES(90,1011,1);
INSERT INTO FACE_PARTE(id_produs,id_comanda,cantitate)
VALUES(75,1012,1);
INSERT INTO FACE_PARTE(id_produs,id_comanda,cantitate)
VALUES(60,1013,1);
INSERT INTO FACE_PARTE(id_produs,id_comanda,cantitate)
VALUES(85,1014,1);
INSERT INTO FACE_PARTE(id_produs,id_comanda,cantitate)
VALUES(100,1015,2);
INSERT INTO FACE_PARTE(id_produs,id_comanda,cantitate)
VALUES(115,1016,2);
INSERT INTO FACE_PARTE(id_produs,id_comanda,cantitate)
VALUES(105,1017,1);
INSERT INTO FACE_PARTE(id_produs,id_comanda,cantitate)
VALUES(110,1018,1);
INSERT INTO FACE_PARTE(id_produs,id_comanda,cantitate)
VALUES(110,1019,1);
INSERT INTO FACE_PARTE(id_produs,id_comanda,cantitate)
VALUES(55,1020,1);
INSERT INTO FACE_PARTE(id_produs,id_comanda,cantitate)
VALUES(75,1021,1);
INSERT INTO FACE_PARTE(id_produs,id_comanda,cantitate)
VALUES(65,1022,1);
INSERT INTO FACE_PARTE(id_produs,id_comanda,cantitate)
VALUES(55,1023,3);
INSERT INTO FACE_PARTE(id_produs,id_comanda,cantitate)
VALUES(50,1024,2);
INSERT INTO FACE_PARTE(id_produs,id_comanda,cantitate)
VALUES(145,1025,2);
INSERT INTO FACE_PARTE(id_produs,id_comanda,cantitate)
VALUES(130,1026,2);
INSERT INTO FACE_PARTE(id_produs,id_comanda,cantitate)
VALUES(140,1027,4);
INSERT INTO FACE_PARTE(id_produs,id_comanda,cantitate)
VALUES(120,1028,2);
INSERT INTO FACE_PARTE(id_produs,id_comanda,cantitate)
VALUES(135,1029,2);
INSERT INTO FACE_PARTE(id_produs,id_comanda,cantitate)
VALUES(125,1030,3);
INSERT INTO FACE_PARTE(id_produs,id_comanda,cantitate)
VALUES(115,1031,2);
INSERT INTO FACE_PARTE(id_produs,id_comanda,cantitate)
VALUES(75,1032,1);
INSERT INTO FACE_PARTE(id_produs,id_comanda,cantitate)
VALUES(125,1033,2);
INSERT INTO FACE_PARTE(id_produs,id_comanda,cantitate)
VALUES(80,1034,3);
INSERT INTO FACE_PARTE(id_produs,id_comanda,cantitate)
VALUES(120,1035,2);
INSERT INTO FACE_PARTE(id_produs,id_comanda,cantitate)
VALUES(140,1036,1);
INSERT INTO FACE_PARTE(id_produs,id_comanda,cantitate)
VALUES(105,1037,2);
INSERT INTO FACE_PARTE(id_produs,id_comanda,cantitate)
VALUES(90,1038,3);
INSERT INTO FACE_PARTE(id_produs,id_comanda,cantitate)
VALUES(95,1039,2);
INSERT INTO FACE_PARTE(id_produs,id_comanda,cantitate)
VALUES(95,1040,2);
INSERT INTO FACE_PARTE(id_produs,id_comanda,cantitate)
VALUES(105,1041,1);
INSERT INTO FACE_PARTE(id_produs,id_comanda,cantitate)
VALUES(85,1001,2);
INSERT INTO FACE_PARTE(id_produs,id_comanda,cantitate)
VALUES(65,1004,3);
INSERT INTO FACE_PARTE(id_produs,id_comanda,cantitate)
VALUES(75,1014,2);
INSERT INTO FACE_PARTE(id_produs,id_comanda,cantitate)
VALUES(145,1024,2);
INSERT INTO FACE_PARTE(id_produs,id_comanda,cantitate)
VALUES(140,1034,1);
INSERT INTO FACE_PARTE(id_produs,id_comanda,cantitate)
VALUES(95,1035,2);
INSERT INTO FACE_PARTE(id_produs,id_comanda,cantitate)
VALUES(90,1036,2);
INSERT INTO FACE_PARTE(id_produs,id_comanda,cantitate)
VALUES(95,1037,1);
INSERT INTO FACE_PARTE(id_produs,id_comanda,cantitate)
VALUES(140,1040,1);


/* CERINȚA 6 */
/* Să se scrie o procedură stocată care primește ca parametri un număr reprezentând o sumă de bani în lei, 
numele unui produs și care returnează prin intermediul unui alt parametru numărul de produse 
din magazin care au prețul mai mic decât prețul dat ca parametru. De asemenea, procedura va afișa numele, 
nuanța și prețul tuturor produselor respective, precum și codurile comenzilor în care a apărut produsul primit ca parametru.*/

CREATE OR REPLACE PROCEDURE filtrare_produse (v_pret IN produs.pret_produs%type, 
                                              v_nume_produs IN produs.nume_produs%type,
                                              nr_produse OUT number)
IS

TYPE tab_ind_comenzi IS TABLE OF comanda.id_comanda%type INDEX BY PLS_INTEGER;
t_comenzi tab_ind_comenzi;

TYPE t_imb_produse IS TABLE OF produs%rowtype;
t_produse t_imb_produse := t_imb_produse();

BEGIN

    SELECT *
    BULK COLLECT INTO t_produse
    FROM produs
    WHERE pret_produs < v_pret;
       
    nr_produse := t_produse.count;

    IF nr_produse = 0 THEN
        RAISE NO_DATA_FOUND;
    END IF;    
    
    DBMS_OUTPUT.PUT_LINE('Produse sub: ' || v_pret || ' lei' );
    DBMS_OUTPUT.PUT_LINE('----------------------------------'); 
    
    FOR i IN t_produse.first..t_produse.last LOOP
        DBMS_OUTPUT.PUT_LINE(t_produse(i).nume_produs || ' ' || nvl(t_produse(i).nuanta,'') || ' (' ||t_produse(i).pret_produs || ' lei)' );
    END LOOP;
    DBMS_OUTPUT.NEW_LINE;
   
    SELECT c.id_comanda
    BULK COLLECT INTO t_comenzi
    FROM comanda c
    JOIN face_parte fp on c.id_comanda = fp.id_comanda
    JOIN produs p on p.id_produs = fp.id_produs
    WHERE upper(p.nume_produs) = upper(v_nume_produs);
   
    DBMS_OUTPUT.PUT_LINE('Comenzile in care a aparut produsul ' || v_nume_produs);
    DBMS_OUTPUT.PUT_LINE('----------------------------------'); 
    
    FOR i IN t_comenzi.first..t_comenzi.last LOOP
        DBMS_OUTPUT.PUT_LINE(t_comenzi(i) || ' ');
    END LOOP;   
   
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RAISE_APPLICATION_ERROR(-20000, 'Nu exista produse mai ieftine decat pretul dat.');
        WHEN OTHERS THEN
             RAISE_APPLICATION_ERROR(-20001, 'Alta eroare!');    
    
END filtrare_produse;
/
DECLARE
nr number;
BEGIN
 filtrare_produse(120.0,'Gloss Bomb',nr); 
 DBMS_OUTPUT.PUT_LINE('Numar de produse sub pretul dat: ' || nr);
 --Declanseaza NO_DATA_FOUND
 filtrare_produse(12.0,'Gloss Bomb',nr);
 DBMS_OUTPUT.PUT_LINE('Numar de produse sub pretul dat: ' || nr);
   EXCEPTION 
        WHEN OTHERS THEN 
            DBMS_OUTPUT.PUT_LINE('Cod = '|| sqlcode || '  Mesaj= ' || sqlerrm ); 
END;
/


/* CERINȚA 7 */
/* Să se creeze o funcție stocată care să afișeze pentru fiecare categorie lista de produse ce fac parte din aceasta, 
nuanța(unde e cazul) și brandul aferent. Funcția trebuie să returneze numele și descrierea(dacă există) categoriei 
cu cele mai multe produse. Dacă sunt mai multe astfel de categorii, se vor returna toate. 
Dacă o categorie nu are produse se va afișa un mesaj corespunzător.*/

CREATE OR REPLACE TYPE vec_produse IS VARRAY(5) OF varchar2(250);
/
CREATE OR REPLACE FUNCTION categoriile_produselor
RETURN vec_produse IS 
    TYPE cursor_de_categorii IS REF CURSOR RETURN categorie%rowtype;
    c_categorii cursor_de_categorii; 
    idx categorie%rowtype; 
      
    CURSOR c_produse (categ varchar2) IS
        SELECT nume_brand, nume_produs, nuanta
        FROM produs
        WHERE nume_categorie = categ;

    
    categorii_max vec_produse;
    nr_prod_max number:= 0;
BEGIN
    
    OPEN c_categorii FOR 
    SELECT * 
    FROM categorie;
    
     LOOP 
     FETCH c_categorii INTO idx;
     EXIT WHEN c_categorii%NOTFOUND;
     DBMS_OUTPUT.PUT_LINE('--' || idx.nume_categorie || '--');
     
     IF idx.nr_produse IS NULL THEN
      DBMS_OUTPUT.PUT_LINE('Aceasta categorie nu are inca produse.');
     END IF; 
     
     FOR p IN c_produse(idx.nume_categorie) LOOP
      
      IF idx.nr_produse > nr_prod_max THEN
       nr_prod_max := idx.nr_produse;
      END IF;
        
      DBMS_OUTPUT.PUT_LINE(p.nume_produs ||' '||nvl(p.nuanta,'')||' - '|| p.nume_brand);
     END LOOP;
     DBMS_OUTPUT.NEW_LINE;
     END LOOP;
     CLOSE c_categorii;
     
     SELECT nume_categorie || ': ' || nvl(descriere_categorie,'Nu are descriere') 
     BULK COLLECT INTO categorii_max
     FROM categorie
     WHERE nr_produse = nr_prod_max;
     
    RETURN categorii_max; 
    
    EXCEPTION      
     WHEN OTHERS THEN
         RAISE_APPLICATION_ERROR(-20000,'Alta eroare!');
         
END categoriile_produselor;
/
DECLARE
v_rezultat vec_produse;
BEGIN  
    v_rezultat := categoriile_produselor;
    DBMS_OUTPUT.PUT_LINE('//Categoriile cu cele mai multe produse\\ ');
    
    FOR i IN v_rezultat.first..v_rezultat.last LOOP
        DBMS_OUTPUT.PUT_LINE(v_rezultat(i));
    END LOOP;
    
    EXCEPTION 
        WHEN OTHERS THEN 
            DBMS_OUTPUT.PUT_LINE('Cod = '|| sqlcode || '  Mesaj= ' || sqlerrm ); 

END;  

/

/* CERINȚA 8 */
/*  Creați o funcție stocată care primește ca parametru numele unui client și al unei firme de curierat și care întoarce
lista codurilor comenzilor care:
    -au avut suma de plată din factură mai mare de 100 de lei (adică au beneficiat de transport gratuit);
    -au fost livrate de firma de curierat dată ca parametru.
*/

CREATE OR REPLACE TYPE tab_imb_id_comenzi IS TABLE OF number(5);
/
CREATE OR REPLACE FUNCTION comenzi_transport_gratuit (v_nume client.nume_client%type, v_companie transport.nume_companie%type)
RETURN tab_imb_id_comenzi IS
    lista_comenzi tab_imb_id_comenzi := tab_imb_id_comenzi();
    v_id number(5);
    nr_comenzi number;
    FIRMA_CURIERAT exception;
    SUMA_PREA_MICA exception;
BEGIN
    
    SELECT id_client 
    INTO v_id
    FROM client
    WHERE upper(nume_client) = upper(v_nume);
    
    --verificari pentru exceptii externe
    SELECT COUNT(*)
    INTO nr_comenzi
    FROM comanda c JOIN transport t ON c.id_comanda = t.id_comanda
    WHERE v_id = c.id_client AND upper(t.nume_companie) = upper(v_companie);
    
    IF nr_comenzi = 0 THEN
        RAISE FIRMA_CURIERAT;
    END IF;
    
    SELECT COUNT(*)
    INTO nr_comenzi
    FROM comanda c 
    JOIN factura f ON c.id_comanda = f.id_comanda
    JOIN transport t ON c.id_comanda = t.id_comanda
    WHERE v_id = c.id_client AND f.suma_de_plata > 100 AND upper(t.nume_companie) = upper(v_companie);
    
    IF nr_comenzi = 0 THEN
        RAISE SUMA_PREA_MICA;
    END IF;
    
    SELECT c.id_comanda
    BULK COLLECT INTO lista_comenzi
    FROM comanda c 
    JOIN factura f ON c.id_comanda = f.id_comanda
    JOIN transport t ON c.id_comanda = t.id_comanda
    WHERE v_id = c.id_client AND f.suma_de_plata > 100 AND upper(t.nume_companie) = upper(v_companie);
        
    RETURN lista_comenzi;
    
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RAISE_APPLICATION_ERROR(-20000, 'Nu exista client sau firma de curierat cu numele dat.');
        WHEN TOO_MANY_ROWS THEN
            RAISE_APPLICATION_ERROR(-20001, 'Exista mai multi clienti cu numele dat.');
        WHEN FIRMA_CURIERAT THEN
            RAISE_APPLICATION_ERROR(-20002, 'Nicio comanda plasata de client nu fost livrata de firma de curierat data.');    
        WHEN SUMA_PREA_MICA THEN
            RAISE_APPLICATION_ERROR(-20003, 'Nicio comanda plasata de client de peste 100 de lei nu fost livrata de firma de curierat data.');  
        WHEN OTHERS THEN
             RAISE_APPLICATION_ERROR(-20004, 'Alta eroare!');
END comenzi_transport_gratuit;

/

DECLARE
v_rez tab_imb_id_comenzi;
BEGIN  
    /*
   DBMS_OUTPUT.PUT_LINE('Jocelin, Cargus');
   v_rez := comenzi_transport_gratuit('Jocelin', 'Cargus');
   FOR i IN v_rez.first..v_rez.last LOOP
    DBMS_OUTPUT.PUT_LINE(v_rez(i) || ' ');
   END LOOP;
  DBMS_OUTPUT.PUT_LINE('Jocelin, Fan Courier'); 
  v_rez := comenzi_transport_gratuit('Jocelin', 'Fan Courier'); 
  FOR i IN v_rez.first..v_rez.last LOOP
    DBMS_OUTPUT.PUT_LINE(v_rez(i) || ' ');
  END LOOP;
  
   --declanseaza TOO_MANY_ROWS  
  DBMS_OUTPUT.PUT_LINE('Beso, Fan Courier');
  v_rez := comenzi_transport_gratuit('Beso', 'Fan Courier');
   FOR i IN v_rez.first..v_rez.last LOOP
    DBMS_OUTPUT.PUT_LINE(v_rez(i) || ' ');
   END LOOP;
  */ 
  --declanseaza FIRMA_CURIERAT
  /*DBMS_OUTPUT.PUT_LINE('Hurik, Cargus');
  v_rez := comenzi_transport_gratuit('Hurik', 'Cargus');
   FOR i IN v_rez.first..v_rez.last LOOP
    DBMS_OUTPUT.PUT_LINE(v_rez(i) || ' ');
   END LOOP;
   */
   
  --declanseaza SUMA_PREA_MICA
  DBMS_OUTPUT.PUT_LINE('Narayan, Cargus');
  v_rez := comenzi_transport_gratuit('Narayan', 'Cargus'); 
  FOR i IN v_rez.first..v_rez.last LOOP
    DBMS_OUTPUT.PUT_LINE(v_rez(i) || ' ');
  END LOOP;
   
    EXCEPTION 
        WHEN OTHERS THEN 
            DBMS_OUTPUT.PUT_LINE('Cod = '|| sqlcode || '  Mesaj= ' || sqlerrm ); 

END;  

/

/* CERINȚA 9 */
/* Creați o procedură stocată care primește ca parametru numele unui angajat și o locație de depozit. 
Procedura va afișa codul, brandul și numele produselor ce au fost gestionate de angajatul dat, 
depozitate la locația menționată și care fac parte dintr-o categorie cu minim trei produse. 
Să se afișeze mesaje corespunzătoare dacă nu există angajatul sau există mai mulți angajați cu același nume, 
dacă numele locației este invalid sau dacă nu există produse care să îndeplinească cele trei condiții.  */

CREATE OR REPLACE PROCEDURE angajat_locatie(v_nume IN angajati.nume_ang%type,
                                            v_locatie IN depozit.locatie%type )
IS
v_cod angajati.id_angajat%type;
verific_locatie number;
v_id_produs produs.id_produs%type; 
v_nume_produs produs.nume_produs%type; 
v_nume_brand produs.nume_brand%type; 

CURSOR c_angajat(loc depozit.locatie%type, ang angajati.id_angajat%type) IS 
    SELECT p.id_produs, p.nume_produs, p.nume_brand
    FROM produs p JOIN face_parte fp ON (p.id_produs = fp.id_produs)
                  JOIN categorie ca ON (p.nume_categorie = ca.nume_categorie)
    WHERE ca.nr_produse > 3 AND fp.id_comanda IN 
                 (SELECT d.id_comanda
                  FROM comanda c JOIN depoziteaza d ON (c.id_comanda=d.id_comanda)
                  WHERE upper(d.locatie) LIKE upper(loc) AND d.id_angajat = ang) 
    GROUP BY  p.id_produs ,p.nume_produs, p.nume_brand ,p.nuanta
    ORDER BY p.nume_brand;

FARA_PRODUSE EXCEPTION;
NU_EXISTA_LOCATIE EXCEPTION;
BEGIN

   SELECT id_angajat
   INTO v_cod
   FROM angajati
   WHERE upper(v_nume) = upper(nume_ang);
   
   SELECT COUNT(*)
   INTO verific_locatie
   FROM depozit
   WHERE upper(locatie) = upper(v_locatie);
   
   IF verific_locatie = 0 THEN
    RAISE NU_EXISTA_LOCATIE;
   END IF; 
   
   OPEN c_angajat(v_locatie,v_cod);
   LOOP
    
    FETCH c_angajat INTO v_id_produs, v_nume_produs, v_nume_brand;
    EXIT WHEN c_angajat%NOTFOUND;
        verific_locatie := 0; --inseamna ca exista cel putin un produs care indeplineste toate cerintele
        DBMS_OUTPUT.PUT_LINE(v_id_produs || '. ' || v_nume_brand || ' - ' || v_nume_produs);
   
   END LOOP;
   CLOSE c_angajat;
   
   IF verific_locatie <> 0 THEN
    RAISE FARA_PRODUSE;
   END IF;
   
   DBMS_OUTPUT.NEW_LINE;
   DBMS_OUTPUT.PUT_LINE('--------------------------------------------');
   DBMS_OUTPUT.PUT_LINE('GESTIONATE DE ANGAJATUL ' || v_nume);
   DBMS_OUTPUT.PUT_LINE('IN DEPOZITUL DIN ' || v_locatie);
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RAISE_APPLICATION_ERROR(-20000, 'Nu exista angajat cu numele dat.');
        WHEN TOO_MANY_ROWS THEN
             RAISE_APPLICATION_ERROR(-20001, 'Exista mai multi angajati cu numele dat.');
        WHEN NU_EXISTA_LOCATIE THEN
            RAISE_APPLICATION_ERROR(-20002, 'Nu exista locatie cu numele dat.');     
        WHEN FARA_PRODUSE THEN
             RAISE_APPLICATION_ERROR(-20003, 'Nu exista produse care sa indeplineasca aceste conditii.');
        WHEN OTHERS THEN
             RAISE_APPLICATION_ERROR(-20004, 'Alta eroare!');    
    
END angajat_locatie;
/

BEGIN
 angajat_locatie('Gabora','Pantelimon'); 

 /*Declanseaza NO_DATA_FOUND
 DBMS_OUTPUT.PUT_LINE('Ene, Pantelimon');
 angajat_locatie('Ene','Pantelimon'); */
 
 /*Declanseaza TOO_MANY_ROWS
 DBMS_OUTPUT.PUT_LINE('Silion, Chitila');
 angajat_locatie('Silion','Chitila'); */
 
 /*--Declanseaza FARA_PRODUSE 
 DBMS_OUTPUT.PUT_LINE('Gabora, Magurele');
 angajat_locatie('Gabora', 'Magurele');*/
 
 /*Declanseaza NU_EXISTA_LOCATIE
 DBMS_OUTPUT.PUT_LINE('Gabora, Mogosoaia');
 angajat_locatie('Gabora','Mogosoaia');*/ 
 
   EXCEPTION 
        WHEN OTHERS THEN 
            DBMS_OUTPUT.PUT_LINE('Cod = '|| sqlcode || '  Mesaj= ' || sqlerrm ); 
END;
/


/* CERINȚA 10 */

CREATE OR REPLACE TRIGGER schimbari_depozite
 BEFORE INSERT OR DELETE OR UPDATE ON depozit
BEGIN
    IF INSERTING THEN
        DBMS_OUTPUT.PUT_LINE('A fost introdus un nou depozit.');
    ELSIF DELETING THEN
        RAISE_APPLICATION_ERROR(-20000,'Este interzisa stergerea unei locatii din baza de date, deoarece este necesara pastrarea istoricului comenzilor!');
    ELSIF UPDATING('locatie') THEN
        RAISE_APPLICATION_ERROR(-20001,'Schimbarea denumirii locatiei unui depozit este interzisa!');
    ELSIF UPDATING('nr_angajati') THEN
        DBMS_OUTPUT.PUT_LINE('Numarul angajatilor ce gestioneaza depozitul a fost modificat.');
    END IF;

END;

/
--DECLANSAREA TRIGGERULUI
INSERT INTO depozit VALUES('1 Decembrie', 0);
/
UPDATE depozit
SET nr_angajati = 3
WHERE locatie = '1 Decembrie';
/
UPDATE depozit
SET locatie = 'Mogosoaia'
WHERE locatie = '1 Decembrie';
/
DELETE FROM depozit
WHERE locatie = '1 Decembrie';
/
ROLLBACK;
/
--DEZACTIVAREA TRIGGER-ULUI 
ALTER TRIGGER schimbari_depozite DISABLE;


/* CERINȚA 11 */

CREATE SEQUENCE S_TRANSPORT
INCREMENT BY 1
START WITH 342
MAXVALUE 1000
NOCYCLE;

CREATE SEQUENCE S_FACTURA
INCREMENT BY 1
START WITH 242
MAXVALUE 1000
NOCYCLE;

/
CREATE OR REPLACE PROCEDURE genereaza_factura_si_transport(v_id_comanda comanda.id_comanda%type, v_pret comanda.pret_total%type)
IS
BEGIN
    IF v_pret < 100 THEN
        INSERT INTO transport VALUES(S_TRANSPORT.nextval, v_id_comanda, sysdate, 'Cargus', 15);
        INSERT INTO factura VALUES(S_FACTURA.nextval, v_id_comanda, v_pret + 15);
    ELSE
        INSERT INTO transport VALUES(S_TRANSPORT.nextval, v_id_comanda, sysdate, 'Cargus', null);
        INSERT INTO factura VALUES(S_FACTURA.nextval, v_id_comanda, v_pret);
    END IF;
END genereaza_factura_si_transport;
/

CREATE OR REPLACE TRIGGER proceseaza_comanda
AFTER INSERT OR DELETE OR UPDATE ON comanda
FOR EACH ROW
DECLARE 
    exista number;
BEGIN
    IF INSERTING THEN
     genereaza_factura_si_transport(:NEW.id_comanda, :NEW.pret_total);
    
     SELECT COUNT(*)
     INTO exista
     FROM client
     WHERE id_client = :NEW.id_client;
     
     IF exista = 1 THEN 
        UPDATE istoric
        SET nr_comenzi = nr_comenzi + 1
        WHERE id_client = :NEW.id_client;
     ELSE
        RAISE_APPLICATION_ERROR(-20000,'Atentie! Clientul care a plasat aceasta comanda trebuie introdus in baza de date!');
     END IF;
     
    ELSIF DELETING THEN 
        UPDATE istoric
        SET nr_comenzi = nr_comenzi - 1
        WHERE id_client = :OLD.id_client;
        
    ELSIF UPDATING('pret_total') THEN 
        IF :NEW.pret_total >= 100 AND :OLD.pret_total < 100 THEN
             UPDATE transport
             SET pret_transport = null
             WHERE id_comanda = :NEW.id_comanda;
             
             UPDATE factura
             SET suma_de_plata = suma_de_plata - 15
             WHERE id_comanda = :NEW.id_comanda;
             
        ELSIF :NEW.pret_total < 100 AND :OLD.pret_total >= 100 THEN
             UPDATE transport
             SET pret_transport = 15
             WHERE id_comanda = :NEW.id_comanda;
             
             UPDATE factura
             SET suma_de_plata = suma_de_plata + 15
             WHERE id_comanda = :NEW.id_comanda;
        END IF;
        
    END IF;
END;
/
--DECLANSAREA TRIGGER-ULUI
INSERT INTO COMANDA VALUES(S_COMANDA.nextval, 1, sysdate, 89.98);
/
--nu exista clientul cu id-ul 20
INSERT INTO COMANDA VALUES(S_COMANDA.nextval, 20, sysdate, 150);

/
--se sterg automat inregistrarile din transport si factura datorita actiunii ON DELETE CASCADE
DELETE FROM comanda
WHERE id_comanda= 1011;
/
UPDATE comanda
SET pret_total = 110
WHERE id_comanda = 1012;
/
ROLLBACK;
/

/* CERINȚA 12 */
CREATE OR REPLACE TRIGGER modificarea_schemei
 BEFORE CREATE OR DROP OR ALTER ON SCHEMA
BEGIN
    IF SYS.DICTIONARY_OBJ_TYPE = 'TABLE' THEN
        DBMS_OUTPUT.PUT_LINE('ATENTIE! Tabelul '|| SYS.DICTIONARY_OBJ_NAME || ' a fost modificat/creat/sters!');
        DBMS_OUTPUT.PUT_LINE('Verificati modelul actual al bazei de date.');
       RAISE_APPLICATION_ERROR(-20001,'Nu este permisa crearea,modificarea sau stergerea tabelelor!');
    ELSE     
        IF SYS.SYSEVENT = 'CREATE' THEN
            DBMS_OUTPUT.PUT_LINE('A fost creat obiectul ' || SYS.DICTIONARY_OBJ_NAME || ' de tip ' || SYS.DICTIONARY_OBJ_TYPE );
        ELSIF SYS.SYSEVENT = 'ALTER' THEN
            DBMS_OUTPUT.PUT_LINE('A fost modificat obiectul ' || SYS.DICTIONARY_OBJ_NAME || ' de tip ' || SYS.DICTIONARY_OBJ_TYPE );
        ELSIF SYS.SYSEVENT = 'DROP' THEN
            DBMS_OUTPUT.PUT_LINE('A fost eliminat obiectul ' || SYS.DICTIONARY_OBJ_NAME || ' de tip ' || SYS.DICTIONARY_OBJ_TYPE );
        END IF;
    END IF;

END;

/
--DECLANSAREA TRIGGERULUI
ALTER TABLE client
ADD ( abonat_newsletter varchar2(3));

/
CREATE SEQUENCE EXEMPLU_trigger
INCREMENT BY 1
START WITH 1
MAXVALUE 10
NOCYCLE;

/
DROP SEQUENCE EXEMPLU_trigger;
/
--DEZACTIVAREA TRIGGER-ULUI 
ALTER TRIGGER modificarea_schemei DISABLE;


/* CERINȚA 14 */

CREATE OR REPLACE PACKAGE comanda_noua
IS
    TYPE despre_client IS RECORD(cod client.id_client%type,
                                 nume client.nume_client%type,
                                 prenume client.prenume_client%type,
                                 telefon client.telefon_client%type,
                                 email client.email_client%type
                                );                           
    TYPE produse_si_cantitate IS RECORD(cod_produs produs.id_produs%type,
                                        nr_exemplare number(3)
                                        );  
    TYPE tab_imb_produse IS TABLE OF produse_si_cantitate;                            
   
    FUNCTION exista_client(v_id client.id_client%type)
     RETURN boolean;
    
    PROCEDURE creeaza_istoric(v_id client.id_client%type);
   
    PROCEDURE adauga_client(client_nou despre_client);
    
    FUNCTION calculeaza_pret(l_produse_cantitate tab_imb_produse) 
     RETURN comanda.pret_total%type;
      
    PROCEDURE depoziteaza_comanda(v_id comanda.id_comanda%type, nr_produse number, nume_locatie depozit.locatie%type);
    
    FUNCTION genereaza_factura(v_id comanda.id_comanda%type, v_pret comanda.pret_total%type, curier transport.nume_companie%type)
     RETURN factura.suma_de_plata%type;
    
    PROCEDURE plaseaza_comanda(clientul_meu despre_client, l_produse_cantitate tab_imb_produse, nume_locatie depozit.locatie%type, curier transport.nume_companie%type);
   
END comanda_noua;
/

CREATE SEQUENCE S_DEPOZITARE
INCREMENT BY 1
START WITH 5051
MAXVALUE 10000
NOCYCLE;

CREATE SEQUENCE S_ALEGE_ANGAJAT
INCREMENT BY 100
START WITH 2200
MINVALUE 2100
MAXVALUE 3000
NOCACHE
CYCLE;
/
CREATE OR REPLACE PACKAGE BODY comanda_noua
IS
/* VERIFICA EXISTENTA CLIENTULUI */
    FUNCTION exista_client(v_id client.id_client%type)
     RETURN boolean IS
        exista number; 
    BEGIN
        
        SELECT COUNT(*) INTO exista
        FROM client
        WHERE id_client = v_id;
        
        IF exista = 0 THEN 
            RETURN FALSE;
        ELSE
            RETURN TRUE;
        END IF;
        
    END exista_client;

/* CREEAZA ISTORICUL UNUI NOU CLIENT */    
    PROCEDURE creeaza_istoric(v_id client.id_client%type)
    IS
    BEGIN
        INSERT INTO istoric VALUES(v_id,1);
    END creeaza_istoric;

/* ADAUGA UN NOU CLIENT IN BAZA DE DATE */     
    PROCEDURE adauga_client(client_nou despre_client)
    IS
        exista number;
        COD_EXISTA exception;
        TELEFON_EXISTA exception;
        EMAIL_EXISTA exception;
    BEGIN
    
        SELECT COUNT(*) INTO exista
        FROM client
        WHERE id_client = client_nou.cod;
        
        IF exista <> 0 THEN 
            RAISE COD_EXISTA;
        END IF;    
        
        SELECT COUNT(*) INTO exista
        FROM client
        WHERE telefon_client = client_nou.telefon;
        
        IF exista <> 0 THEN 
            RAISE TELEFON_EXISTA;
        END IF;    
        
        SELECT COUNT(*) INTO exista
        FROM client
        WHERE email_client = client_nou.email;
        
        IF exista <> 0 THEN 
            RAISE EMAIL_EXISTA;
        END IF;
        
        INSERT INTO client VALUES(client_nou.cod, client_nou.nume, client_nou.prenume, client_nou.telefon, client_nou.email);
        
        creeaza_istoric(client_nou.cod);
        
        DBMS_OUTPUT.PUT_LINE('A fost introdus cu succes in baza de date clientul ' || client_nou.nume || ' ' ||
        client_nou.prenume || ' (' || client_nou.cod || ').' );
        
    EXCEPTION
            WHEN COD_EXISTA THEN
                RAISE_APPLICATION_ERROR(-20000, 'Exista deja un client cu id-ul introdus!');
            WHEN TELEFON_EXISTA THEN
                RAISE_APPLICATION_ERROR(-20001, 'Exista deja un client cu numarul de telefon introdus!');
            WHEN EMAIL_EXISTA THEN
                RAISE_APPLICATION_ERROR(-20002, 'Exista deja un client cu adresa de email introdusa!');
    END adauga_client;

/* CALCULEAZA PRETUL COMENZII */    
    FUNCTION calculeaza_pret(l_produse_cantitate tab_imb_produse) 
    RETURN comanda.pret_total%type IS
        pret_p produs.pret_produs%type; 
        pret_t comanda.pret_total%type := 0;
    BEGIN
        FOR i IN l_produse_cantitate.first..l_produse_cantitate.last LOOP
            SELECT pret_produs INTO pret_p
            FROM produs
            WHERE id_produs = l_produse_cantitate(i).cod_produs;
            
            pret_t := pret_t + pret_p * l_produse_cantitate(i).nr_exemplare;
        END LOOP;
        
        RETURN pret_t;
    END calculeaza_pret;
    
/* ADAUGA IN DEPOZITEAZA INFORMATII DESPRE DEPOZITAREA COMENZII */    
    PROCEDURE depoziteaza_comanda(v_id comanda.id_comanda%type, nr_produse number, nume_locatie depozit.locatie%type)
    IS
    BEGIN
        
        IF nr_produse >= 10 THEN
            INSERT INTO depoziteaza VALUES(S_DEPOZITARE.nextval, nume_locatie, S_ALEGE_ANGAJAT.nextval, v_id);
            INSERT INTO depoziteaza VALUES(S_DEPOZITARE.nextval, nume_locatie, S_ALEGE_ANGAJAT.nextval, v_id);
        ELSE
            INSERT INTO depoziteaza VALUES(S_DEPOZITARE.nextval, nume_locatie, S_ALEGE_ANGAJAT.nextval, v_id);
        END IF;   
            
    END depoziteaza_comanda;
 
/* ADAUGA IN FACTURA SI TRANSPORT INREGISTRARILE CORESPUNZATOARE COMENZII*/    
    FUNCTION genereaza_factura(v_id comanda.id_comanda%type, v_pret comanda.pret_total%type, curier transport.nume_companie%type)
    RETURN factura.suma_de_plata%type IS
    BEGIN
        IF v_pret < 100 THEN
            INSERT INTO transport VALUES(S_TRANSPORT.nextval, v_id, sysdate, 'Cargus', 15);
            INSERT INTO factura VALUES(S_FACTURA.nextval, v_id, v_pret + 15);
            RETURN v_pret + 15;
        ELSE
            INSERT INTO transport VALUES(S_TRANSPORT.nextval, v_id, sysdate, 'Cargus', null);
            INSERT INTO factura VALUES(S_FACTURA.nextval, v_id, v_pret);
            RETURN v_pret;
        END IF;
            
    END genereaza_factura;

/* ADAUGA IN BAZA DE DATE NOUA COMANDA */    
    PROCEDURE plaseaza_comanda(clientul_meu despre_client, l_produse_cantitate tab_imb_produse, nume_locatie depozit.locatie%type, curier transport.nume_companie%type)
    IS
        id_comanda_noua comanda.id_comanda%type;
        pretul_comenzii comanda.pret_total%type;
        pretul_facturii factura.suma_de_plata%type;
        CANTITATE_PREA_MARE exception;
    BEGIN
        FOR i IN l_produse_cantitate.first..l_produse_cantitate.last LOOP
            IF l_produse_cantitate(i).nr_exemplare > 100 THEN
                RAISE CANTITATE_PREA_MARE;
            END IF;    
        END LOOP;
        
        IF exista_client(clientul_meu.cod) THEN
            UPDATE istoric
            SET nr_comenzi = nr_comenzi + 1
            WHERE id_client = clientul_meu.cod;
        ELSE
            adauga_client(clientul_meu);
        END IF;
        
        id_comanda_noua := S_COMANDA.nextval;
        pretul_comenzii := calculeaza_pret(l_produse_cantitate);
        INSERT INTO comanda VALUES(id_comanda_noua, clientul_meu.cod, sysdate, pretul_comenzii);
        
        FOR i IN l_produse_cantitate.first..l_produse_cantitate.last LOOP
            INSERT INTO face_parte VALUES(l_produse_cantitate(i).cod_produs, id_comanda_noua, l_produse_cantitate(i).nr_exemplare);    
        END LOOP;
        
        depoziteaza_comanda(id_comanda_noua, l_produse_cantitate.COUNT, nume_locatie);
        
        pretul_facturii := genereaza_factura(id_comanda_noua, pretul_comenzii, curier);
        
        DBMS_OUTPUT.PUT_LINE('Comanda cu id-ul ' || id_comanda_noua || ' a fost plasata cu succes!');
        DBMS_OUTPUT.PUT_LINE('Suma de plata: ' || pretul_facturii || ' RON');
       
        EXCEPTION
            WHEN CANTITATE_PREA_MARE THEN
                RAISE_APPLICATION_ERROR(-20003, 'Cantitatea maxima a unui produs per comanda este 100!');
            
    END plaseaza_comanda;
END comanda_noua;
/
DECLARE
    v_client_comanda comanda_noua.despre_client;
    v_produs_cantitate comanda_noua.produse_si_cantitate;  
    produsele_comenzii comanda_noua.tab_imb_produse := comanda_noua.tab_imb_produse();
    produsele_comenzii2 comanda_noua.tab_imb_produse := comanda_noua.tab_imb_produse();
    produsele_comenzii3 comanda_noua.tab_imb_produse := comanda_noua.tab_imb_produse();
    
    v_locatie depozit.locatie%type;
    v_curier  transport.nume_companie%type;
    exista number;
    LOCATIE_INEXISTENTA exception;
    FIRMA_INEXISTENTA exception;
BEGIN
    
    /* Verificarea existentei locatiei introduse */
        v_locatie := '&nume_depozit';
    
        SELECT COUNT(*) INTO exista
        FROM depozit
        WHERE locatie = v_locatie;
        
        IF exista = 0 THEN 
            RAISE LOCATIE_INEXISTENTA;
        END IF;
        
    /* Verificarea existentei firmei de curierat introduse */    
        v_curier := '&firma_curierat'; 

        SELECT COUNT(*) INTO exista
        FROM transport
        WHERE nume_companie = v_curier;
        
        IF exista = 0 THEN 
            RAISE FIRMA_INEXISTENTA;
        END IF;
    
    /* Plasarea unei comenzi de catre un client din baza de date */

    SELECT * 
    INTO v_client_comanda.cod, v_client_comanda.nume, v_client_comanda.prenume, v_client_comanda.telefon, v_client_comanda.email
    FROM client
    WHERE id_client = 10;
    
    FOR i IN 5..14 LOOP --10 produse
         v_produs_cantitate.cod_produs := i*10;
         v_produs_cantitate.nr_exemplare := i;
         produsele_comenzii.EXTEND;
         produsele_comenzii(i-4) := v_produs_cantitate;
    END LOOP;
    
    comanda_noua.plaseaza_comanda(v_client_comanda, produsele_comenzii, v_locatie, v_curier);
   
    /* Plasarea unei comenzi de catre un client nou */
   v_client_comanda.cod := 16;
   v_client_comanda.nume := 'Popescu';
   v_client_comanda.prenume := 'Andrei';
   v_client_comanda.telefon := 0768910111213;
   v_client_comanda.email := 'popescu_andrei@gmail.com';
    
   /* Cazul in care se incearca introducerea unei cantitati prea mari*/
    /*
    v_produs_cantitate.cod_produs := 45;
    v_produs_cantitate.nr_exemplare := 120;
    produsele_comenzii2.EXTEND;
    produsele_comenzii2(1) := v_produs_cantitate;
    comanda_noua.plaseaza_comanda(v_client_comanda, produsele_comenzii2, v_locatie, v_curier);
    */
    
    /* Cazul in care se introduce o cantitate corespunzatoare*/
    FOR i IN 15..20 LOOP
         v_produs_cantitate.cod_produs := i*5;
         v_produs_cantitate.nr_exemplare := i;
         produsele_comenzii3.EXTEND;
         produsele_comenzii3(i-14) := v_produs_cantitate;
    END LOOP; 
    
    comanda_noua.plaseaza_comanda(v_client_comanda, produsele_comenzii3, v_locatie, v_curier);
    
    EXCEPTION 
        WHEN LOCATIE_INEXISTENTA THEN
                RAISE_APPLICATION_ERROR(-20004, 'Nu exista locatie cu numele introdus!');
         WHEN FIRMA_INEXISTENTA THEN
                RAISE_APPLICATION_ERROR(-20005, 'Nu exista firma de curierat cu numele introdus!');
        WHEN OTHERS THEN 
            DBMS_OUTPUT.PUT_LINE('Cod = '|| sqlcode || '  Mesaj= ' || sqlerrm ); 
    
END;
/
